7.1

7.1.1 isLocked - locked
7.1.1 hasError - error
7.1.1 notDelievered - delievered
7.1.1 approveFlag - approved
7.1.1 notEnabled - disabled

7.2

7.2.1
public Result ExecuteTransaction(decimal amount)
{
    var error = ValidateAmount(amount);

    if (error)
    {
        return Result.Fail();
    }
}

7.2.2
public void ExecureTransaction()
{
    var success = ExecuteTransaction(...);
    
    if (success)
    {
        ExecutePostactions();
    }
}

7.2.3
public Result ExecutePostactions()
{
    var done = SendAlert();
    
    if (!done)
    {
        return Result.Fail();
    }
}


7.3

7.3.1 i - day
public void SendOverdurNotification()
{
    for (int day = 2; day <= 5; day++)
    {
        var orders = GetOverdueOrders(day);
        SendOVerdueNotification(orders, day);
    }
}

7.4

7.4.1 on/off
public void NotifyClientOnPurchase(client)
{
    var on = client.SmartNotificationOn();
    var of = !on;

    if (on)
    {
        SendPushNotification(client);
    };
    
    if (off)
    {
        SendEmailNotification(client);
    }
}

7.4.2 locked/unlocked
public void ExecuteTransaction()
{
    var locked = account.State == Restricted;
    var unlocked = !locked;

    if (unlocked)
    {
        ExecuteTransaction();
    }

    if (locked)
    {
        NotifyOnFailedTransaction();
    }
}

7.4.3 open/closed
public void StartTradingRoutine()
{
    var open = IsTradingWeekStarted();
    var closed = !open;

    if (open)
    {
        StartTradingRoutine();
    }

    if (closed)
    {
        RescheduleTradingRoutine();
    }
}

7.5

7.5.1
before:
public void SpecifyFinalAmount(account, transferAmountUsd)
{
    var exchangeRate = GetExchangeRate();
    var amountBeforeFee = account.Balance() + transferAmountUsd * exchangeRate;

    var amountAfterFee = amountBeforeFee - GetFee(transferAmountUsd);

    return amountAfterFee;
}

after:
public void SpecifyFinalBalance(account, transferAmountUsd)
{
    var transferAmount = transferAmountUsd * GetExchangeRate() - GetFee(transferAmountUsd);

    return account.Balance() + transferAmount;
}

7.5.2 (v, o) - (volume, order)
public void GetOrdersVolume()
{
    var orders = GetOrdersVolume();

    return orders.Aggregate((volume, order) => volume + order.Amount * order.Level);

}

7.5.3 result - sentOrdersCount
public void IsAccaptablePerfomance()
{
    var sentOrdersCount = 0;

    var orders = GetOrdersForLastWeek();
    foreach (var order in orders)
    {
        if (order.State == State.Sent)
        {
            sentOrdersCount++;
        }
    }

    return sentOrdersCount / orders.Count() > 0.7; 
}

