1. для tenant based приложения с отдельными деплоями мы имеем конфигурацию бизнес насроек через код (условный Tenant1Config.cs). В данном файле мы можем позволить себе маскимально раннее связывание, оно будет наиболее очевидное при чтении, а учитывая то что на уровне конкретного тенанта величины конфигураций меняются крайне редко, то потери от такого связывания стремятся к 0.

...
tenantConfig.MinUserAge = 21;
tenantConfig.MainCountry = "GB";
tenantConfig.TransfersPerDay = 4;
...

2. для бизнес логики ограничивающей количество данных в нотификаиях для отдела поддержки используем константу, шанс того что значение попросят изменить время от времени достаточно высок.

private static const NOTIFICATIN_ROWS_LIMIT = 25;

...

foreach(user in users.Take(NOTIFICATIN_ROWS_LIMIT))
{
	//add data to notification email
}

3. в случае когда приложение содержит ряд настроек постовляемых через локальное окружение, мы будем иметь наиболее позднее связывание, тк значение сущетсвует только для уже запущенного экземпляра приложения. 

...
config.TenantdId = GetLocalVariable("Tenant_Id");
...