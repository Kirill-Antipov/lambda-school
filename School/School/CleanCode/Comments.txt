3.1.1 //back compatibility. remove this line after ticket "N" implemented

3.1.2 //server drops first connection so reconnect implemented

3.1.3 //TODO: move configuration to database

3.1.4 //do password hash update for exisitng users on login since it's the only possibility to change it

3.1.5 //find nearest whole number for amount when currnecy conversion applied

3.1.6 //this method will be envoked with reflection

3.1.7 //run template to generate new configuration file


3.2.1
// review only scoped users
... user.Level == Level.Silver && user.Region == "EU" && !user.Flags.HasFlag(Flags.Reviewed)

-> create local function

bool userReviewRequired(user)
{
    return user.Level == Level.Silver && user.Region == "EU" && !user.Flags.HasFlag(Flags.Reviewed);
}

3.2.2
//only users with level higher then Silver
if(user.Level >= Level.Silver)
{
    ...
}

-> obvious code. comment remmoved

3.2.3
//calculate total price
foreach(order in orders)
{
    ...
}

-> extract function

private decimal CalculateTotalPrice(IEnumerable<Order> orders)
{
    ...
}

3.2.4
//parse notification amount
var json = json.ParseObject(notificationString);
var amount = json["amount"];
...

-> extarct class

public class PaymentProviderNotificationParser
{
    ...

    public decimal GetAmount(string notification)
    {...}
}



3.2.5
//define file header
Columns.Add("Name");

...

-> extract method

public void DefineColumnNames()
{
    ...
}